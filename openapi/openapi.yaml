openapi: 3.0.0
info:
  title: PyLGRum
  contact:
    name: "Josh Heling"
  version: '1.0'
servers:
- url: https://api.server.test/v1
paths:
  /players:
    get:
      summary: Players_GET
      description: List available players.
      operationId: pylgrum.pylgrum_server.list_players
      parameters: []
      responses:
        '200':
          description: list of available players
          headers: {}
          content:
            application/json:
              schema:
                properties:
                  players:
                    type: array
                    items:
                      $ref: '#/components/schemas/Player'
                description: list of available players
      deprecated: false
    post:
      summary: Players_POST
      description: Register player with server.
      operationId: pylgrum.pylgrum_server.register_player
      requestBody:
        description: Player being registered
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                required:
                  - name
      responses:
        '200':
          description: player accepted, player ID returned
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
      deprecated: false
    delete:
      summary: Players_DELETE
      description: De-registers all players.
      operationId: pylgrum.pylgrum_server.delete_players
      responses:
        '200':
          description: players deleted
  /games:
    post:
      summary: Games_POST
      description: Start a game.
      operationId: pylgrum.pylgrum_server.create_game
      requestBody:
        description: Player starting the game
        required: true
        content:
          application/json:
              schema:
                type: object
                properties:
                  player:
                    $ref: '#/components/schemas/Player'
                  opponent_id:
                    type: string
                required:
                  - player
                  - opponent_id
      responses:
        '200':
          description: Game started
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '403':
          description: Requesting player ID not found
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
      deprecated: false
  /games/{game_id}:
    post:
      summary: Game_POST
      description: Get current status of a game.
      operationId: pylgrum.pylgrum_server.game_status
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player:
                  $ref: '#/components/schemas/Player'
              required:
                - player
      parameters:
        - name: game_id
          in: path
          description: ID of the game being played
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Game status returned
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '401':
          description: Unauthorized
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Requested game ID not found
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
  /games/{game_id}/move:
    post:
      summary: Move_POST
      description: Phase 1 of a move - draw or discard_showing
      operationId: pylgrum.pylgrum_server.turn_start
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                player:
                  $ref: '#/components/schemas/Player'
                cardsource:
                  type: string
                  enum:
                    - discard
                    - deck
      parameters:
        - name: game_id
          in: path
          description: ID of the game being played
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Game status returned
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '401':
          description: Unauthorized
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Requested game ID not found
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          description: Internal error
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Player:
      title: Player
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Card:
      title: Card
      type: object
      properties:
        suit:
          type: string
        card:
          type: string
      required:
        - suit
        - card
    Hand:
      title: Hand
      type: array
      items:
        $ref: '#/components/schemas/Card'
      minItems: 10
      maxItems: 10
    Game:
      title: Game
      type: object
      properties:
        game_id:
          type: string
        description:
          type: string
        current_player:
          $ref: '#/components/schemas/Player'
        visible_discard:
          $ref: '#/components/schemas/Card'
        hand:
          $ref: '#/components/schemas/Hand'
        new_card:
          $ref: '#/components/schemas/Card'
      required:
        - game_id
        - current_player
        - visible_discard
        - hand
    PublicMove:
      title: PublicMove
      type: object
      properties:
        game_id:
          type: string
        move_id:
          type: integer
          format: int32
        player_id:
          type: string
        card_from:
          type: string
        card_discarded:
          type: string
    UnauthorizedError:
      title: Unauthorized request error
      type: object
      properties:
        details:
          type: string
    NotFoundError:
      title: Object not found error
      type: object
      properties:
        player:
          $ref: '#/components/schemas/Player'
        details:
          type: string
    Error:
      title: Generic internal error
      type: object
      properties:
        details:
          type: string

tags: []
